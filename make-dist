#!/usr/bin/python3
#+
# Generate an addon release archive. For repeatability, the timestamp
# and contents for each file are taken from the last commit affecting
# that file.
#
# By default, this script generates an archive for the most recent
# commit. Optionally, it can take an arg identifying a specific commit
# (e.g. a tag). For example, the command
#
#     ./make-dist v1.0
#
# will make an archive for the commit tagged “v1.0” (assuming it exists).
# This tag name will also be included in the created archive name.
#-

import sys
import os
import time
import subprocess
import zipfile
import getopt

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    []
  )
if len(args) == 1 :
    upto = args[0]
    earliest = subprocess.check_output \
      (
        args = ("git", "rev-list", "--reverse", upto)
      ).split(b"\n")[0].strip().decode()
elif len(args) == 0 :
    upto = None
else :
    raise getopt.GetoptError("only expecting one arg, the tag to build a release for")
#end if

basename = "add_mesh_SpaceshipGenerator"
outfilename = "%s%s.zip" % (basename, (lambda : "", lambda : "-" + upto)[upto != None]())
out = zipfile.ZipFile(outfilename, "x")
if upto != None :
    log_range = (earliest, upto)
else :
    log_range = ()
#end if
for filename in \
    (
        "__init__.py",
        "spaceship_generator.py",
        "textures/hull_normal.png",
        "textures/hull_lights_emit.png",
        "textures/hull_lights_diffuse.png",
        "icons/spaceship.png",
    ) \
:
    item = zipfile.ZipInfo.from_file(filename, "/".join((basename, filename)))
    item.compress_type = zipfile.ZIP_DEFLATED
    info = subprocess.check_output \
      (
        args = ("git", "log", "--format=%ct:%H", "-n1") + log_range + ("--", filename)
      ).strip()
    if info != b"" :
        timestamp, commit_hash = info.split(b":")
        timestamp = int(timestamp)
        info = subprocess.check_output \
          (
            args = ("git", "ls-tree", commit_hash, filename)
          ).strip()
        object_hash = info.split(b"\t")[0].split(b" ")[2].decode()
        object_contents = subprocess.check_output \
          (
            args = ("git", "show", object_hash)
          )
        item.date_time = time.gmtime(timestamp)[:6]
        out.writestr(item, object_contents)
    else :
        pass # assume item was added after this commit
    #end if
#end for
out.close()

print("created archive: %s" % outfilename)
